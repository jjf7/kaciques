{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\kaciques\\\\front\\\\components\\\\Table2.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport DataTable from \"react-data-table-component\";\n\nconst EditableCell = ({\n  row,\n  index,\n  column,\n  col,\n  onChange\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(row[column.selector]);\n\n  const handleOnChange = e => {\n    setValue(e.target.value);\n    onChange === null || onChange === void 0 ? void 0 : onChange(e);\n  };\n\n  if (column !== null && column !== void 0 && column.editing) {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: column.type || 'text',\n      name: column.selector,\n      style: {\n        width: '100%'\n      },\n      onChange: handleOnChange,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (col.cell) {\n    return col.cell(row, index, column);\n  }\n\n  return row[column.selector];\n};\n\nconst Table2 = ({\n  columns,\n  data\n}) => {\n  const {\n    0: innerData,\n    1: setInnerData\n  } = useState(data);\n  const {\n    0: editingId,\n    1: setEditingId\n  } = useState('');\n  let formData = useRef({}).current;\n\n  const isEditing = record => record.id === editingId;\n\n  const formOnChange = event => {\n    const nam = event.target.name;\n    const val = event.target.value;\n    formData = _objectSpread(_objectSpread({}, formData), {}, {\n      [nam]: val\n    });\n  };\n\n  const edit = record => {\n    setEditingId(record.id);\n  };\n\n  const cancel = () => {\n    setEditingId('');\n  };\n\n  const save = item => {\n    const payload = _objectSpread(_objectSpread({}, item), formData);\n\n    const tempData = [...innerData];\n    const index = tempData.findIndex(item => editingId === item.id);\n\n    if (index > -1) {\n      const item = tempData[index];\n      tempData.splice(index, 1, _objectSpread(_objectSpread({}, item), payload));\n      setEditingId('');\n      setInnerData(tempData);\n    }\n  };\n\n  const mergedColumns = columns.map(col => {\n    return _objectSpread(_objectSpread({}, col), {}, {\n      cell: (row, index, column) => {\n        const editing = isEditing(row);\n        return /*#__PURE__*/_jsxDEV(EditableCell, {\n          row: row,\n          index: index,\n          column: _objectSpread(_objectSpread({}, column), {}, {\n            editing\n          }),\n          col: col,\n          onChange: formOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  });\n  const createColumns = useCallback(() => {\n    return [...mergedColumns, {\n      name: 'Actions',\n      allowOverflow: true,\n      minWidth: '200px',\n      cell: row => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => edit(row),\n          style: {\n            backgroundColor: 'aliceblue'\n          },\n          children: \"edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 18\n        }, this);\n      }\n    }];\n  }, [mergedColumns]);\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    title: \"Movie List\",\n    columns: createColumns(),\n    data: data,\n    defaultSortField: \"title\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Table2;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/kaciques/front/components/Table2.js"],"names":["React","useCallback","useRef","useState","DataTable","EditableCell","row","index","column","col","onChange","value","setValue","selector","handleOnChange","e","target","editing","type","width","cell","Table2","columns","data","innerData","setInnerData","editingId","setEditingId","formData","current","isEditing","record","id","formOnChange","event","nam","name","val","edit","cancel","save","item","payload","tempData","findIndex","splice","mergedColumns","map","createColumns","allowOverflow","minWidth","backgroundColor"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA,GAAtB;AAA2BC,EAAAA;AAA3B,CAAD,KAA2C;AAC9D,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAACG,GAAG,CAACE,MAAM,CAACK,QAAR,CAAJ,CAAlC;;AAEA,QAAMC,cAAc,GAAGC,CAAC,IAAI;AAC1BH,IAAAA,QAAQ,CAACG,CAAC,CAACC,MAAF,CAASL,KAAV,CAAR;AACAD,IAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGK,CAAH,CAAR;AACD,GAHD;;AAKA,MAAIP,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAES,OAAZ,EAAqB;AACnB,wBACE;AACE,MAAA,IAAI,EAAET,MAAM,CAACU,IAAP,IAAe,MADvB;AAEE,MAAA,IAAI,EAAEV,MAAM,CAACK,QAFf;AAGE,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAE;AAAT,OAHT;AAIE,MAAA,QAAQ,EAAEL,cAJZ;AAKE,MAAA,KAAK,EAAEH;AALT;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAED,MAAIF,GAAG,CAACW,IAAR,EAAc;AACZ,WAAOX,GAAG,CAACW,IAAJ,CAASd,GAAT,EAAcC,KAAd,EAAqBC,MAArB,CAAP;AACD;;AACD,SAAOF,GAAG,CAACE,MAAM,CAACK,QAAR,CAAV;AACD,CAxBD;;AA0BA,MAAMQ,MAAM,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAAqB;AAClC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BtB,QAAQ,CAACoB,IAAD,CAA1C;AAEA,QAAM;AAAA,OAACG,SAAD;AAAA,OAAYC;AAAZ,MAA4BxB,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAIyB,QAAQ,GAAG1B,MAAM,CAAC,EAAD,CAAN,CAAW2B,OAA1B;;AACA,QAAMC,SAAS,GAAGC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcN,SAA1C;;AAEA,QAAMO,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAMC,GAAG,GAAGD,KAAK,CAAClB,MAAN,CAAaoB,IAAzB;AACA,UAAMC,GAAG,GAAGH,KAAK,CAAClB,MAAN,CAAaL,KAAzB;AAEAiB,IAAAA,QAAQ,mCACHA,QADG;AAEN,OAACO,GAAD,GAAOE;AAFD,MAAR;AAID,GARD;;AAUA,QAAMC,IAAI,GAAGP,MAAM,IAAI;AACrBJ,IAAAA,YAAY,CAACI,MAAM,CAACC,EAAR,CAAZ;AACD,GAFD;;AAIA,QAAMO,MAAM,GAAG,MAAM;AACnBZ,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAFD;;AAIA,QAAMa,IAAI,GAAGC,IAAI,IAAI;AACnB,UAAMC,OAAO,mCAAQD,IAAR,GAAiBb,QAAjB,CAAb;;AACA,UAAMe,QAAQ,GAAG,CAAC,GAAGnB,SAAJ,CAAjB;AAGA,UAAMjB,KAAK,GAAGoC,QAAQ,CAACC,SAAT,CAAmBH,IAAI,IAAIf,SAAS,KAAKe,IAAI,CAACT,EAA9C,CAAd;;AACA,QAAIzB,KAAK,GAAG,CAAC,CAAb,EAAgB;AAEd,YAAMkC,IAAI,GAAGE,QAAQ,CAACpC,KAAD,CAArB;AACAoC,MAAAA,QAAQ,CAACE,MAAT,CAAgBtC,KAAhB,EAAuB,CAAvB,kCACKkC,IADL,GAEKC,OAFL;AAIAf,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAF,MAAAA,YAAY,CAACkB,QAAD,CAAZ;AACD;AACF,GAhBD;;AAkBA,QAAMG,aAAa,GAAGxB,OAAO,CAACyB,GAAR,CAAYtC,GAAG,IAAI;AAEvC,2CACKA,GADL;AAEEW,MAAAA,IAAI,EAAE,CAACd,GAAD,EAAMC,KAAN,EAAaC,MAAb,KAAwB;AAC5B,cAAMS,OAAO,GAAGa,SAAS,CAACxB,GAAD,CAAzB;AACA,4BACE,QAAC,YAAD;AACE,UAAA,GAAG,EAAEA,GADP;AAEE,UAAA,KAAK,EAAEC,KAFT;AAGE,UAAA,MAAM,kCAAOC,MAAP;AAAeS,YAAAA;AAAf,YAHR;AAIE,UAAA,GAAG,EAAER,GAJP;AAKE,UAAA,QAAQ,EAAEwB;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF;AASD;AAbH;AAeD,GAjBqB,CAAtB;AAmBA,QAAMe,aAAa,GAAG/C,WAAW,CAAC,MAAM;AACtC,WAAO,CACL,GAAG6C,aADE,EAEL;AACEV,MAAAA,IAAI,EAAE,SADR;AAEEa,MAAAA,aAAa,EAAE,IAFjB;AAGEC,MAAAA,QAAQ,EAAE,OAHZ;AAIE9B,MAAAA,IAAI,EAAEd,GAAG,IAAI;AACX,4BAAO;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,MAAMgC,IAAI,CAAChC,GAAD,CAAzC;AAAgD,UAAA,KAAK,EAAE;AAAE6C,YAAAA,eAAe,EAAE;AAAnB,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AANH,KAFK,CAAP;AAWD,GAZgC,EAY9B,CAACL,aAAD,CAZ8B,CAAjC;AAcA,sBACE,QAAC,SAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,OAAO,EAAEE,aAAa,EAFxB;AAGE,IAAA,IAAI,EAAEzB,IAHR;AAIE,IAAA,gBAAgB,EAAC;AAJnB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApFD;;AAsFA,eAAeF,MAAf","sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\n\r\n\r\nconst EditableCell = ({ row, index, column, col, onChange }) => {\r\n  const [value, setValue] = useState(row[column.selector]);\r\n\r\n  const handleOnChange = e => {\r\n    setValue(e.target.value);\r\n    onChange?.(e);\r\n  };\r\n\r\n  if (column?.editing) {\r\n    return (\r\n      <input\r\n        type={column.type || 'text'}\r\n        name={column.selector}\r\n        style={{ width: '100%' }}\r\n        onChange={handleOnChange}\r\n        value={value}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (col.cell) {\r\n    return col.cell(row, index, column);\r\n  }\r\n  return row[column.selector];\r\n};\r\n\r\nconst Table2 = ({columns, data}) => {\r\n  const [innerData, setInnerData] = useState(data);\r\n  \r\n  const [editingId, setEditingId] = useState('');\r\n  let formData = useRef({}).current;\r\n  const isEditing = record => record.id === editingId;\r\n\r\n  const formOnChange = event => {\r\n    const nam = event.target.name;\r\n    const val = event.target.value;\r\n\r\n    formData = {\r\n      ...formData,\r\n      [nam]: val,\r\n    };\r\n  };\r\n\r\n  const edit = record => {\r\n    setEditingId(record.id);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingId('');\r\n  };\r\n\r\n  const save = item => {\r\n    const payload = { ...item, ...formData };\r\n    const tempData = [...innerData];\r\n\r\n    \r\n    const index = tempData.findIndex(item => editingId === item.id);\r\n    if (index > -1) {\r\n      \r\n      const item = tempData[index];\r\n      tempData.splice(index, 1, {\r\n        ...item,\r\n        ...payload,\r\n      });\r\n      setEditingId('');\r\n      setInnerData(tempData);\r\n    }\r\n  };\r\n\r\n  const mergedColumns = columns.map(col => {\r\n    \r\n    return {\r\n      ...col,\r\n      cell: (row, index, column) => {\r\n        const editing = isEditing(row);\r\n        return (\r\n          <EditableCell\r\n            row={row}\r\n            index={index}\r\n            column={{ ...column, editing }}\r\n            col={col}\r\n            onChange={formOnChange}\r\n          />\r\n        );\r\n      },\r\n    };\r\n  });\r\n\r\n  const createColumns = useCallback(() => {\r\n    return [\r\n      ...mergedColumns,\r\n      {\r\n        name: 'Actions',\r\n        allowOverflow: true,\r\n        minWidth: '200px',\r\n        cell: row => {\r\n          return <button type=\"button\" onClick={() => edit(row)} style={{ backgroundColor: 'aliceblue' }}>edit</button>;\r\n        },\r\n      },\r\n    ];\r\n  }, [mergedColumns]);\r\n\r\n  return (\r\n    <DataTable\r\n      title=\"Movie List\"\r\n      columns={createColumns()}\r\n      data={data}\r\n      defaultSortField=\"title\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Table2"]},"metadata":{},"sourceType":"module"}