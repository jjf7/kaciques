{"ast":null,"code":"export function formatMoney(amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    const negativeSign = amount < 0 ? \"-\" : \"\";\n    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["C:/Users/Owner/Desktop/kaciques/front/utils/format.js"],"names":["formatMoney","amount","decimalCount","decimal","thousands","Math","abs","isNaN","negativeSign","i","parseInt","Number","toFixed","toString","j","length","substr","replace","slice","e","console","log"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,YAAY,GAAG,CAA5C,EAA+CC,OAAO,GAAG,GAAzD,EAA8DC,SAAS,GAAG,GAA1E,EAA+E;AAClF,MAAI;AACFF,IAAAA,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASJ,YAAT,CAAf;AACAA,IAAAA,YAAY,GAAGK,KAAK,CAACL,YAAD,CAAL,GAAsB,CAAtB,GAA0BA,YAAzC;AAEA,UAAMM,YAAY,GAAGP,MAAM,GAAG,CAAT,GAAa,GAAb,GAAmB,EAAxC;AAEA,QAAIQ,CAAC,GAAGC,QAAQ,CACbT,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASK,MAAM,CAACV,MAAD,CAAN,IAAkB,CAA3B,EAA8BW,OAA9B,CAAsCV,YAAtC,CADI,CAAR,CAENW,QAFM,EAAR;AAGA,QAAIC,CAAC,GAAGL,CAAC,CAACM,MAAF,GAAW,CAAX,GAAeN,CAAC,CAACM,MAAF,GAAW,CAA1B,GAA8B,CAAtC;AAEA,WACEP,YAAY,IACXM,CAAC,GAAGL,CAAC,CAACO,MAAF,CAAS,CAAT,EAAYF,CAAZ,IAAiBV,SAApB,GAAgC,EADtB,CAAZ,GAEAK,CAAC,CAACO,MAAF,CAASF,CAAT,EAAYG,OAAZ,CAAoB,gBAApB,EAAsC,OAAOb,SAA7C,CAFA,IAGCF,YAAY,GACTC,OAAO,GACPE,IAAI,CAACC,GAAL,CAASL,MAAM,GAAGQ,CAAlB,EACGG,OADH,CACWV,YADX,EAEGgB,KAFH,CAES,CAFT,CAFS,GAKT,EARJ,CADF;AAWD,GAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF","sourcesContent":["export function formatMoney(amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\r\n    try {\r\n      decimalCount = Math.abs(decimalCount);\r\n      decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\r\n  \r\n      const negativeSign = amount < 0 ? \"-\" : \"\";\r\n  \r\n      let i = parseInt(\r\n        (amount = Math.abs(Number(amount) || 0).toFixed(decimalCount))\r\n      ).toString();\r\n      let j = i.length > 3 ? i.length % 3 : 0;\r\n  \r\n      return (\r\n        negativeSign +\r\n        (j ? i.substr(0, j) + thousands : \"\") +\r\n        i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) +\r\n        (decimalCount\r\n          ? decimal +\r\n            Math.abs(amount - i)\r\n              .toFixed(decimalCount)\r\n              .slice(2)\r\n          : \"\")\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}