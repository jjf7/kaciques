{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\kaciques\\\\front\\\\components\\\\Table.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { useTable, usePagination, useRowSelect } from \"react-table\";\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    indeterminate\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"indeterminate\"]);\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({\n      type: \"checkbox\",\n      ref: resolvedRef\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n});\nexport default function Table({\n  columns,\n  data,\n  setlModal\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: 5\n    }\n  }, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Editar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, _objectSpread({}, row.getToggleRowSelectedProps()), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, ...columns]);\n  });\n\n  if (selectedFlatRows[0]) {\n    console.log(selectedFlatRows[0].original);\n  } // Render the UI for your table\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({\n      className: \"table mt-5\"\n    }, getTableProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({\n            className: \"find\"\n          }, column.getHeaderProps()), {}, {\n            children: column.render('Header')\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({\n                className: \"find\"\n              }, cell.getCellProps()), {}, {\n                children: cell.render('Cell')\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 26\n              }, this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => gotoPage(0),\n        disabled: !canPreviousPage,\n        children: '<<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => gotoPage(pageCount - 1),\n        disabled: !canNextPage,\n        children: '>>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"| Go to page:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: pageIndex + 1,\n          onChange: e => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0;\n            gotoPage(page);\n          },\n          style: {\n            width: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n        value: pageSize,\n        onChange: e => {\n          setPageSize(Number(e.target.value));\n        },\n        children: [5, 10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pageSize,\n          children: [\"Show \", pageSize]\n        }, pageSize, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["C:/Users/Owner/Desktop/kaciques/front/components/Table.js"],"names":["React","useTable","usePagination","useRowSelect","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Table","columns","data","setlModal","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","state","pageIndex","pageSize","selectedRowIds","initialState","hooks","visibleColumns","push","id","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","console","log","original","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","e","target","value","Number","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { useTable, usePagination, useRowSelect } from \"react-table\";\r\n\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\nexport default function Table({ columns, data, setlModal }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n    state: { pageIndex, pageSize, selectedRowIds },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize:5 },\r\n    },\r\n    usePagination,\r\n    useRowSelect,\r\n    hooks => {\r\n      hooks.visibleColumns.push(columns => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: 'selection',\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n            <div>\r\n             Editar\r\n            </div>\r\n          ),\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ])\r\n    }\r\n  )\r\n\r\n  if(selectedFlatRows[0]){\r\n    \r\n    console.log(selectedFlatRows[0].original)\r\n  }\r\n  \r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n          \r\n      <table className=\"table mt-5\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th className=\"find\" {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td className=\"find\" {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/* \r\n        Pagination can be built however you'd like. \r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className=\"pagination\">\r\n        <button className=\"btn btn-secondary\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button className=\"btn btn-secondary\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button className=\"btn btn-secondary\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button className=\"btn btn-secondary\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[5, 10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        \r\n      </div>\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}