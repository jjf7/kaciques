{"ast":null,"code":"export function formatMoney(amount) {\n  var decimalCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \",\";\n  var thousands = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \".\";\n\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    var negativeSign = amount < 0 ? \"-\" : \"\";\n    var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    var j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function replace(value) {\n  var a = value.toString().replace(/\\./g, \"\");\n  var b = a.replace(/\\,/g, \".\");\n  return b;\n}","map":{"version":3,"sources":["C:/Users/Owner/Desktop/kaciques/front/utils/format.js"],"names":["formatMoney","amount","decimalCount","decimal","thousands","Math","abs","isNaN","negativeSign","i","parseInt","Number","toFixed","toString","j","length","substr","replace","slice","e","console","log","value","a","b"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,MAArB,EAA+E;AAAA,MAAlDC,YAAkD,uEAAnC,CAAmC;AAAA,MAAhCC,OAAgC,uEAAtB,GAAsB;AAAA,MAAjBC,SAAiB,uEAAL,GAAK;;AAClF,MAAI;AACFF,IAAAA,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASJ,YAAT,CAAf;AACAA,IAAAA,YAAY,GAAGK,KAAK,CAACL,YAAD,CAAL,GAAsB,CAAtB,GAA0BA,YAAzC;AAEA,QAAMM,YAAY,GAAGP,MAAM,GAAG,CAAT,GAAa,GAAb,GAAmB,EAAxC;AAEA,QAAIQ,CAAC,GAAGC,QAAQ,CACbT,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASK,MAAM,CAACV,MAAD,CAAN,IAAkB,CAA3B,EAA8BW,OAA9B,CAAsCV,YAAtC,CADI,CAAR,CAENW,QAFM,EAAR;AAGA,QAAIC,CAAC,GAAGL,CAAC,CAACM,MAAF,GAAW,CAAX,GAAeN,CAAC,CAACM,MAAF,GAAW,CAA1B,GAA8B,CAAtC;AAEA,WACEP,YAAY,IACXM,CAAC,GAAGL,CAAC,CAACO,MAAF,CAAS,CAAT,EAAYF,CAAZ,IAAiBV,SAApB,GAAgC,EADtB,CAAZ,GAEAK,CAAC,CAACO,MAAF,CAASF,CAAT,EAAYG,OAAZ,CAAoB,gBAApB,EAAsC,OAAOb,SAA7C,CAFA,IAGCF,YAAY,GACTC,OAAO,GACPE,IAAI,CAACC,GAAL,CAASL,MAAM,GAAGQ,CAAlB,EACGG,OADH,CACWV,YADX,EAEGgB,KAFH,CAES,CAFT,CAFS,GAKT,EARJ,CADF;AAWD,GAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AAED,OAAO,SAASF,OAAT,CAAiBK,KAAjB,EAAuB;AAE5B,MAAMC,CAAC,GAAGD,KAAK,CAACT,QAAN,GAAiBI,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAAV;AACA,MAAMO,CAAC,GAAGD,CAAC,CAACN,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAV;AACA,SAAOO,CAAP;AACD","sourcesContent":["export function formatMoney(amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\r\n    try {\r\n      decimalCount = Math.abs(decimalCount);\r\n      decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\r\n  \r\n      const negativeSign = amount < 0 ? \"-\" : \"\";\r\n  \r\n      let i = parseInt(\r\n        (amount = Math.abs(Number(amount) || 0).toFixed(decimalCount))\r\n      ).toString();\r\n      let j = i.length > 3 ? i.length % 3 : 0;\r\n  \r\n      return (\r\n        negativeSign +\r\n        (j ? i.substr(0, j) + thousands : \"\") +\r\n        i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) +\r\n        (decimalCount\r\n          ? decimal +\r\n            Math.abs(amount - i)\r\n              .toFixed(decimalCount)\r\n              .slice(2)\r\n          : \"\")\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  export function replace(value){\r\n    \r\n    const a = value.toString().replace(/\\./g, \"\");\r\n    const b = a.replace(/\\,/g, \".\");\r\n    return b\r\n  }"]},"metadata":{},"sourceType":"module"}